import { describe, it, expect, mock } from "bun:test";
import { BinanceAPI } from "./binance";
import { formatPrice, mapResponseToKlines } from "./mappers";
import { calculateDeltaChange } from "./calculations";

const mockData = [
  [
    1757403600000, "113075.05000000", "113085.40000000", "112905.81000000", "112905.81000000",
    "61.11239000", 1757403899999, "6906245.85469060", 7408, "10.11857000", "1143545.72618840",
    "0"
  ], [
    1757403900000, "112905.81000000", "112984.00000000", "112753.61000000", "112980.00000000",
    "110.85656000", 1757404199999, "12510010.37920310", 12661, "38.50456000", "4345930.20733260",
    "0"
  ], [
    1757404200000, "112979.03000000", "113018.15000000", "112957.22000000", "113005.28000000",
    "52.03819000", 1757404499999, "5879882.98264030", 5185, "14.34770000", "1621092.92590090",
    "0"
  ], [
    1757404500000, "113005.27000000", "113063.44000000", "112951.97000000", "112991.11000000",
    "52.28648000", 1757404799999, "5908679.11382340", 5412, "22.02613000", "2488938.78079280",
    "0"
  ], [
    1757404800000, "112991.11000000", "113108.00000000", "112969.32000000", "113011.40000000",
    "58.23623000", 1757405099999, "6582069.89721700", 6489, "28.02687000", "3167628.68044290",
    "0"
  ], [
    1757405100000, "113011.40000000", "113113.45000000", "112977.11000000", "112989.41000000",
    "33.80266000", 1757405399999, "3821426.34663990", 5379, "15.91594000", "1799362.97099010",
    "0"
  ], [
    1757405400000, "112989.40000000", "113062.50000000", "112989.40000000", "113029.65000000",
    "22.08579000", 1757405699999, "2496169.09619130", 4226, "14.50092000", "1638879.52632730",
    "0"
  ], [
    1757405700000, "113029.65000000", "113053.42000000", "112916.41000000", "112922.81000000",
    "32.48943000", 1757405999999, "3670541.19118030", 7230, "11.14512000", "1259142.07142120",
    "0"
  ], [
    1757406000000, "112922.82000000", "113000.00000000", "112900.00000000", "113000.00000000",
    "35.55941000", 1757406299999, "4016186.94622120", 5197, "25.83258000", "2917632.86706090",
    "0"
  ], [
    1757406300000, "112999.99000000", "113079.87000000", "112978.01000000", "113079.86000000",
    "39.71164000", 1757406599999, "4489107.52327910", 3905, "29.90896000", "3380769.04635790",
    "0"
  ], [
    1757406600000, "113079.87000000", "113176.51000000", "113075.13000000", "113075.13000000",
    "64.15381000", 1757406899999, "7257584.79173790", 6296, "27.76489000", "3140818.54326060",
    "0"
  ], [
    1757406900000, "113075.13000000", "113100.00000000", "113007.96000000", "113071.51000000",
    "67.48428000", 1757407199999, "7629648.24556450", 5013, "35.75757000", "4042455.90499840",
    "0"
  ], [
    1757407200000, "113071.51000000", "113071.51000000", "113040.11000000", "113040.12000000",
    "22.12449000", 1757407499999, "2501294.95847280", 2750, "12.57279000", "1421368.59865070",
    "0"
  ], [
    1757407500000, "113040.11000000", "113040.12000000", "112930.00000000", "112930.01000000",
    "52.64736000", 1757407799999, "5947458.53186400", 3791, "35.04534000", "3958736.47901240",
    "0"
  ], [
    1757407800000, "112930.00000000", "112931.44000000", "112886.93000000", "112931.43000000",
    "50.46903000", 1757408099999, "5698213.79607960", 3366, "21.19801000", "2393461.51714690",
    "0"
  ], [
    1757408100000, "112931.44000000", "112992.69000000", "112931.43000000", "112992.69000000",
    "45.58755000", 1757408399999, "5149926.21623130", 2560, "37.94651000", "4286695.23866640",
    "0"
  ], [
    1757408400000, "112992.69000000", "113000.00000000", "112933.57000000", "112933.58000000",
    "21.91708000", 1757408699999, "2476151.67963720", 2744, "7.43167000", "839594.15071110",
    "0"
  ], [
    1757408700000, "112933.58000000", "112952.46000000", "112923.01000000", "112923.01000000",
    "21.90035000", 1757408999999, "2473337.58620700", 2863, "3.90782000", "441348.16403960",
    "0"
  ], [
    1757409000000, "112923.01000000", "112941.32000000", "112920.87000000", "112939.94000000",
    "52.84628000", 1757409299999, "5968067.39062740", 2466, "13.55551000", "1530836.06155100",
    "0"
  ], [
    1757409300000, "112939.95000000", "113057.99000000", "112939.94000000", "112975.28000000",
    "61.45960000", 1757409599999, "6945756.86880240", 5764, "34.39583000", "3886723.98141320",
    "0"
  ]
]

describe("Binance API", () => {


	it("should get klines", async () => {
		const binanceAPI = new BinanceAPI();
		const getKlines = mock(binanceAPI.getKlines);
		getKlines.mockResolvedValue(mockData);
		const klines = await getKlines({ symbol: "BTCUSDT", interval: "5m", limit: 20  });
		console.log(klines)
		expect(klines).toEqual(mockData);

		getKlines.mockRestore();
	});

	it('should map the data to useful format', async () => {
		const mockKlines =   [[
			1715328000000, "63078.01000000", "63092.38000000", "63052.47000000", "63085.74000000",
			"37.76846000", 1715328059999, "2382167.52949290", 1222, "15.14137000", "955015.62605350",
			"0"
		]]

		const metrics = mockKlines.map(mapResponseToKlines)

		const expectedMetrics = [
			{
				open: 1715328000000,
				high: 63078.01000000,
				low: 63092.38000000,
				close: 63052.47000000,
				volume: 63085.74000000,
				closeTime: 37.76846000,
			}
		]

		expect(metrics).toEqual(expectedMetrics)
	})


	it('calculate delta change', () => {
		const metrics = mockData.map(mapResponseToKlines)
		const deltaChange = calculateDeltaChange(metrics)
		expect(deltaChange).toBe(0.0003022873667883403)
	})

	// would test this with more time
	it.skip('calculate delta change with missing data', () => {})

	it('get formatted data for the UI', async() => {
		const binanceAPI = new BinanceAPI();
		const mockKlines = mockData.map(mapResponseToKlines)
		const exchangeInfo = await binanceAPI.getExchangeInfo({baseAsset: 'BTC', quoteAsset: 'USDC'})
		const formattedKlines = mockKlines.map(kline => ({
			...kline,
			low: formatPrice(kline.low, exchangeInfo.quotePrecision),
			high: formatPrice(kline.high, exchangeInfo.quotePrecision),
			close: formatPrice(kline.close, exchangeInfo.quotePrecision),
		}))

		const expectedKlines = [
			{
				open: 1757403600000,
				high: "$113,075.05",
				low: "$113,085.40",
				close: "$112,905.81",
				volume: 112905.81,
				closeTime: 61.11239,
			}, {
				open: 1757403900000,
				high: "$112,905.81",
				low: "$112,984.00",
				close: "$112,753.61",
				volume: 112980,
				closeTime: 110.85656,
			}, {
				open: 1757404200000,
				high: "$112,979.03",
				low: "$113,018.15",
				close: "$112,957.22",
				volume: 113005.28,
				closeTime: 52.03819,
			}, {
				open: 1757404500000,
				high: "$113,005.27",
				low: "$113,063.44",
				close: "$112,951.97",
				volume: 112991.11,
				closeTime: 52.28648,
			}, {
				open: 1757404800000,
				high: "$112,991.11",
				low: "$113,108.00",
				close: "$112,969.32",
				volume: 113011.4,
				closeTime: 58.23623,
			}, {
				open: 1757405100000,
				high: "$113,011.40",
				low: "$113,113.45",
				close: "$112,977.11",
				volume: 112989.41,
				closeTime: 33.80266,
			}, {
				open: 1757405400000,
				high: "$112,989.40",
				low: "$113,062.50",
				close: "$112,989.40",
				volume: 113029.65,
				closeTime: 22.08579,
			}, {
				open: 1757405700000,
				high: "$113,029.65",
				low: "$113,053.42",
				close: "$112,916.41",
				volume: 112922.81,
				closeTime: 32.48943,
			}, {
				open: 1757406000000,
				high: "$112,922.82",
				low: "$113,000.00",
				close: "$112,900.00",
				volume: 113000,
				closeTime: 35.55941,
			}, {
				open: 1757406300000,
				high: "$112,999.99",
				low: "$113,079.87",
				close: "$112,978.01",
				volume: 113079.86,
				closeTime: 39.71164,
			}, {
				open: 1757406600000,
				high: "$113,079.87",
				low: "$113,176.51",
				close: "$113,075.13",
				volume: 113075.13,
				closeTime: 64.15381,
			}, {
				open: 1757406900000,
				high: "$113,075.13",
				low: "$113,100.00",
				close: "$113,007.96",
				volume: 113071.51,
				closeTime: 67.48428,
			}, {
				open: 1757407200000,
				high: "$113,071.51",
				low: "$113,071.51",
				close: "$113,040.11",
				volume: 113040.12,
				closeTime: 22.12449,
			}, {
				open: 1757407500000,
				high: "$113,040.11",
				low: "$113,040.12",
				close: "$112,930.00",
				volume: 112930.01,
				closeTime: 52.64736,
			}, {
				open: 1757407800000,
				high: "$112,930.00",
				low: "$112,931.44",
				close: "$112,886.93",
				volume: 112931.43,
				closeTime: 50.46903,
			}, {
				open: 1757408100000,
				high: "$112,931.44",
				low: "$112,992.69",
				close: "$112,931.43",
				volume: 112992.69,
				closeTime: 45.58755,
			}, {
				open: 1757408400000,
				high: "$112,992.69",
				low: "$113,000.00",
				close: "$112,933.57",
				volume: 112933.58,
				closeTime: 21.91708,
			}, {
				open: 1757408700000,
				high: "$112,933.58",
				low: "$112,952.46",
				close: "$112,923.01",
				volume: 112923.01,
				closeTime: 21.90035,
			}, {
				open: 1757409000000,
				high: "$112,923.01",
				low: "$112,941.32",
				close: "$112,920.87",
				volume: 112939.94,
				closeTime: 52.84628,
			}, {
				open: 1757409300000,
				high: "$112,939.95",
				low: "$113,057.99",
				close: "$112,939.94",
				volume: 112975.28,
				closeTime: 61.4596,
			}
		]
		expect(formattedKlines).toEqual(expectedKlines)
	})

});